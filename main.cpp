#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <ctime>
#include <cstdlib>
#include <iomanip>
#include <limits>
#include "user.h"
#include "wallet.h"
#include "auth.h"
#include "otp.h"
#include "datastorage.h"

using namespace std;

vector<User> users;
vector<Wallet> wallets;

// Hàm in đường viền
void printLine(char c = '=', int length = 50) {
    cout << string(length, c) << "\n";
}

// Hàm in tiêu đề
void printTitle(const string& title) {
    printLine();
    cout << "| " << setw(46) << left << title << " |\n";
    printLine();
}

// Hàm tìm người dùng
User* findUser(const string& username) {
    for (auto& user : users) {
        if (user.username == username) {
            return &user;
        }
    }
    return nullptr;
}

// Hàm tìm ví
Wallet* findWallet(const string& walletId) {
    for (auto& wallet : wallets) {
        if (wallet.walletId == walletId) {
            return &wallet;
        }
    }
    return nullptr;
}

// Hàm lưu người dùng
void saveUsers() {
    DataStorage::saveUsers("data/users.txt", users);
    DataStorage::backupData("data/users.txt", "data/backup/users_" + to_string(time(nullptr)) + ".bak");
}

// Hàm tải người dùng
void loadUsers() {
    users = DataStorage::loadUsers("data/users.txt");
}

// Hàm lưu ví
void saveWallets() {
    DataStorage::saveWallets("data/wallets.txt", wallets);
    DataStorage::backupData("data/wallets.txt", "data/backup/wallets_" + to_string(time(nullptr)) + ".bak");
}

// Hàm tải ví
void loadWallets() {
    wallets = DataStorage::loadWallets("data/wallets.txt");
}

// Hàm ghi log giao dịch
void logTransaction(const string& sender, const string& receiver, int amount, const string& status) {
    string message = "From: " + sender + " | To: " + receiver + " | Amount: " + to_string(amount) + " | Status: " + status;
    DataStorage::writeLog("data/transactions.txt", message);
}

// Hàm đăng ký người dùng
void registerUser(User* currentUser = nullptr) {
    string username, password, fullName, email, phone;
    bool isAdmin = currentUser && currentUser->role == Role::ADMIN;
    bool autoGeneratePwd = false;

    printTitle("DANG KY TAI KHOAN");
    cout << "Nhap ten dang nhap: ";
    cin >> username;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    if (username.empty() || findUser(username)) {
        cout << "Ten dang nhap khong hop le hoac da ton tai.\n";
        return;
    }

    if (isAdmin) {
        cout << "Sinh mat khau tu dong? (y/n): ";
        char choice;
        cin >> choice;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        autoGeneratePwd = (choice == 'y' || choice == 'Y');
        password = autoGeneratePwd ? Auth::generateRandomPassword() : "";
    }

    if (!autoGeneratePwd) {
        cout << "Nhap mat khau: ";
        cin >> password;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        if (password.empty()) {
            cout << "Mat khau khong hop le.\n";
            return;
        }
    }

    cout << "Nhap ho ten: ";
    getline(cin, fullName);
    if (fullName.empty()) {
        cout << "Ho ten khong hop le.\n";
        return;
    }

    cout << "Nhap email: ";
    cin >> email;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    if (email.empty()) {
        cout << "Email khong hop le.\n";
        return;
    }

    cout << "Nhap so dien thoai: ";
    cin >> phone;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    if (phone.empty()) {
        cout << "So dien thoai khong hop le.\n";
        return;
    }

    string hashedPwd = Auth::hashPassword(password);
    User newUser(username, hashedPwd, fullName, email, phone, isAdmin ? Role::USER : Role::USER, autoGeneratePwd);
    users.push_back(newUser);

    string walletId = "W" + to_string(rand() % 10000 + 1);
    Wallet newWallet(walletId, username, 0);
    wallets.push_back(newWallet);

    cout << "Dang ky thanh cong!\n";
    cout << "Vi cua ban co ID: " << walletId;
    if (autoGeneratePwd) {
        cout << " | Mat khau tu sinh: " << password;
    }
    cout << "\n";

    saveUsers();
    saveWallets();
}

// Hàm đăng nhập
User* loginUser() {
    string username, password;
    printTitle("DANG NHAP");
    cout << "Ten dang nhap: ";
    cin >> username;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "Mat khau: ";
    cin >> password;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    User* user = findUser(username);
    if (user && Auth::verifyPassword(password, user->password_hash)) {
        if (user->isAutoGeneratedPwd) {
            printLine('-');
            cout << "Mat khau cua ban la tu sinh. Vui long doi mat khau.\n";
            string newPassword;
            cout << "Nhap mat khau moi: ";
            cin >> newPassword;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (Auth::changePassword(*user, password, newPassword)) {
                cout << "Doi mat khau thanh cong.\n";
                saveUsers();
            } else {
                cout << "Doi mat khau that bai.\n";
                return nullptr;
            }
        }
        cout << "Dang nhap thanh cong!\n";
        return user;
    } else {
        cout << "Ten dang nhap hoac mat khau khong dung.\n";
        return nullptr;
    }
}

// Hàm xem số dư
void viewBalance(User* user) {
    printTitle("SO DU VI");
    for (const auto& wallet : wallets) {
        if (wallet.ownerUsername == user->username) {
            cout << "Vi ID: " << wallet.walletId << "\n";
            cout << "So du: => " << wallet.balance << " diem\n";
            return;
        }
    }
    cout << "Khong tim thay vi.\n";
}

// Hàm hiển thị thông tin tài khoản
void viewUserInfo(User* user) {
    printTitle("THONG TIN TAI KHOAN");
    cout << "Ten dang nhap: " << user->username << "\n";
    cout << "Ho ten: " << user->full_name << "\n";
    cout << "Email: " << user->email << "\n";
    cout << "So dien thoai: " << user->phone << "\n";
    cout << "Vai tro: " << (user->role == Role::ADMIN ? "ADMIN" : "USER") << "\n";
    printLine('-');
}

// Hàm cập nhật thông tin cá nhân
void updateUserInfo(User* user) {
    printTitle("CAP NHAT THONG TIN CA NHAN");
    cout << "| 1. Thay doi ho ten                     |\n";
    cout << "| 2. Thay doi email                      |\n";
    cout << "| 3. Thay doi so dien thoai              |\n";
    cout << "| 4. Quay lai                            |\n";
    printLine();
    cout << "Lua chon: ";
    int choice;
    cin >> choice;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string newValue, otp, inputOtp;
    bool needUpdate = false;

    if (choice == 1) {
        cout << "Nhap ho ten moi: ";
        getline(cin, newValue);
        if (newValue.empty()) {
            cout << "Ho ten khong hop le.\n";
            return;
        }
        otp = OTP::generateOTP();
        cout << "Ma OTP (gui den " << user->email << "): " << otp << "\n";
        cout << "Nhap ma OTP: ";
        cin >> inputOtp;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        if (OTP::validateOTP(inputOtp, otp)) {
            user->full_name = newValue;
            needUpdate = true;
            cout << "Cap nhat ho ten thanh cong.\n";
        } else {
            cout << "Ma OTP khong hop le.\n";
        }
    } else if (choice == 2) {
        cout << "Nhap email moi: ";
        cin >> newValue;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        if (newValue.empty()) {
            cout << "Email khong hop le.\n";
            return;
        }
        otp = OTP::generateOTP();
        cout << "Ma OTP (gui den " << user->email << "): " << otp << "\n";
        cout << "Nhap ma OTP: ";
        cin >> inputOtp;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        if (OTP::validateOTP(inputOtp, otp)) {
            user->email = newValue;
            needUpdate = true;
            cout << "Cap nhat email thanh cong.\n";
        } else {
            cout << "Ma OTP khong hop le.\n";
        }
    } else if (choice == 3) {
        cout << "Nhap so dien thoai moi: ";
        cin >> newValue;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        if (newValue.empty()) {
            cout << "So dien thoai khong hop le.\n";
            return;
        }
        otp = OTP::generateOTP();
        cout << "Ma OTP (gui den " << user->email << "): " << otp << "\n";
        cout << "Nhap ma OTP: ";
        cin >> inputOtp;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        if (OTP::validateOTP(inputOtp, otp)) {
            user->phone = newValue;
            needUpdate = true;
            cout << "Cap nhat so dien thoai thanh cong.\n";
        } else {
            cout << "Ma OTP khong hop le.\n";
        }
    } else if (choice == 4) {
        return;
    } else {
        cout << "Lua chon khong hop le.\n";
        return;
    }

    if (needUpdate) {
        saveUsers();
    }
}

// Hàm đổi mật khẩu
void changePassword(User* user) {
    string oldPassword, newPassword;
    printTitle("DOI MAT KHAU");
    cout << "Nhap mat khau cu: ";
    cin >> oldPassword;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "Nhap mat khau moi: ";
    cin >> newPassword;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string otp = OTP::generateOTP();
    cout << "Ma OTP (gui den " << user->email << "): " << otp << "\n";
    string inputOtp;
    cout << "Nhap ma OTP: ";
    cin >> inputOtp;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    if (!OTP::validateOTP(inputOtp, otp)) {
        cout << "Ma OTP khong hop le.\n";
        return;
    }

    if (Auth::changePassword(*user, oldPassword, newPassword)) {
        cout << "Doi mat khau thanh cong.\n";
        saveUsers();
    } else {
        cout << "Mat khau cu khong dung.\n";
    }
}

// Hàm chuyển điểm
void transferPoints(User* user) {
    string targetWalletId;
    int amount;
    printTitle("CHUYEN DIEM");
    cout << "Nhap ID vi dich: ";
    cin >> targetWalletId;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "Nhap so diem can chuyen: ";
    cin >> amount;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    Wallet* senderWallet = nullptr;
    Wallet* receiverWallet = findWallet(targetWalletId);

    for (auto& wallet : wallets) {
        if (wallet.ownerUsername == user->username) {
            senderWallet = &wallet;
            break;
        }
    }

    if (!senderWallet) {
        cout << "Khong tim thay vi cua ban.\n";
        return;
    }

    if (!receiverWallet) {
        cout << "Vi dich khong ton tai.\n";
        return;
    }

    if (senderWallet->balance < amount) {
        cout << "So du khong du de thuc hien giao dich.\n";
        return;
    }

    string otp = OTP::generateOTP();
    cout << "Ma OTP (gui den " << user->email << "): " << otp << "\n";
    string inputOtp;
    cout << "Nhap ma OTP: ";
    cin >> inputOtp;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    if (!OTP::validateOTP(inputOtp, otp)) {
        cout << "Ma OTP khong hop le.\n";
        return;
    }

    int originalSenderBalance = senderWallet->balance;
    int originalReceiverBalance = receiverWallet->balance;
    senderWallet->balance -= amount;
    receiverWallet->balance += amount;

    if (DataStorage::saveWallets("data/wallets.txt", wallets)) {
        logTransaction(senderWallet->walletId, receiverWallet->walletId, amount, "SUCCESS");
        cout << "Chuyen diem thanh cong.\n";
    } else {
        senderWallet->balance = originalSenderBalance;
        receiverWallet->balance = originalReceiverBalance;
        logTransaction(senderWallet->walletId, receiverWallet->walletId, amount, "FAILED");
        cout << "Giao dich that bai.\n";
    }
}

// Hàm quản lý người dùng (admin)
void adminManageUsers(User* admin) {
    printTitle("QUAN LY NGUOI DUNG");
    cout << "1. Xem danh sach nguoi dung\n";
    cout << "2. Tao tai khoan nguoi dung moi\n";
    cout << "3. Sua thong tin nguoi dung\n";
    cout << "4. Quay lai\n";
    cout << "Lua chon: ";
    int choice;
    cin >> choice;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    if (choice == 1) {
        printLine('-');
        cout << "DANH SACH NGUOI DUNG\n";
        printLine('-');
        for (const auto& user : users) {
            cout << "Username: " << user.username << "\n";
            cout << "Ho ten: " << user.full_name << "\n";
            cout << "Email: " << user.email << "\n";
            cout << "Phone: " << user.phone << "\n";
            cout << "Vai tro: " << (user.role == Role::ADMIN ? "ADMIN" : "USER") << "\n";
            printLine('-');
        }
    } else if (choice == 2) {
        registerUser(admin);
    } else if (choice == 3) {
        string targetUsername;
        cout << "Nhap ten dang nhap cua nguoi dung can sua: ";
        cin >> targetUsername;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        User* targetUser = findUser(targetUsername);
        if (!targetUser) {
            cout << "Nguoi dung khong ton tai.\n";
            return;
        }

        cout << "| 1. Thay doi ho ten                     |\n";
        cout << "| 2. Thay doi email                      |\n";
        cout << "| 3. Thay doi so dien thoai              |\n";
        cout << "| 4. Quay lai                            |\n";
        printLine();
        cout << "Lua chon: ";
        int subChoice;
        cin >> subChoice;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        string newValue, otp, inputOtp;
        bool needUpdate = false;

        if (subChoice == 1) {
            cout << "Nhap ho ten moi: ";
            getline(cin, newValue);
            if (newValue.empty()) {
                cout << "Ho ten khong hop le.\n";
                return;
            }
            otp = OTP::generateOTP();
            cout << "Ma OTP (gui den " << targetUser->email << "): " << otp << "\n";
            cout << "Nhap ma OTP: ";
            cin >> inputOtp;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (OTP::validateOTP(inputOtp, otp)) {
                targetUser->full_name = newValue;
                needUpdate = true;
                cout << "Cap nhat ho ten thanh cong.\n";
            } else {
                cout << "Ma OTP khong hop le.\n";
            }
        } else if (subChoice == 2) {
            cout << "Nhap email moi: ";
            cin >> newValue;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (newValue.empty()) {
                cout << "Email khong hop le.\n";
                return;
            }
            otp = OTP::generateOTP();
            cout << "Ma OTP (gui den " << targetUser->email << "): " << otp << "\n";
            cout << "Nhap ma OTP: ";
            cin >> inputOtp;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (OTP::validateOTP(inputOtp, otp)) {
                targetUser->email = newValue;
                needUpdate = true;
                cout << "Cap nhat email thanh cong.\n";
            } else {
                cout << "Ma OTP khong hop le.\n";
            }
        } else if (subChoice == 3) {
            cout << "Nhap so dien thoai moi: ";
            cin >> newValue;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (newValue.empty()) {
                cout << "So dien thoai khong hop le.\n";
                return;
            }
            otp = OTP::generateOTP();
            cout << "Ma OTP (gui den " << targetUser->email << "): " << otp << "\n";
            cout << "Nhap ma OTP: ";
            cin >> inputOtp;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (OTP::validateOTP(inputOtp, otp)) {
                targetUser->phone = newValue;
                needUpdate = true;
                cout << "Cap nhat so dien thoai thanh cong.\n";
            } else {
                cout << "Ma OTP khong hop le.\n";
            }
        } else if (subChoice == 4) {
            return;
        } else {
            cout << "Lua chon khong hop le.\n";
            return;
        }

        if (needUpdate) {
            saveUsers();
        }
    } else if (choice == 4) {
        return;
    } else {
        cout << "Lua chon khong hop le.\n";
    }
}

// Hàm khôi phục từ sao lưu
void restoreBackup() {
    printTitle("KHOI PHUC DU LIEU");
    string backupPath;
    cout << "Nhap duong dan file sao luu (users): ";
    cin >> backupPath;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    if (DataStorage::restoreData(backupPath, "data/users.txt")) {
        cout << "Khoi phuc du lieu nguoi dung thanh cong.\n";
        loadUsers();
    } else {
        cout << "Khoi phuc du lieu that bai.\n";
    }

    cout << "Nhap duong dan file sao luu (wallets): ";
    cin >> backupPath;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    if (DataStorage::restoreData(backupPath, "data/wallets.txt")) {
        cout << "Khoi phuc du lieu vi thanh cong.\n";
        loadWallets();
    } else {
        cout << "Khoi phuc du lieu that bai.\n";
    }
}

int main() {
    srand(time(0));
    loadUsers();
    loadWallets();

    int choice;
    User* currentUser = nullptr;

    while (true) {
        printTitle("HE THONG QUAN LY VI DIEM THUONG");
        cout << "| 1. Dang ky                             |\n";
        cout << "| 2. Dang nhap                           |\n";
        cout << "| 3. Khoi phuc tu sao luu                |\n";
        cout << "| 4. Thoat                               |\n";
        printLine();
        cout << "Lua chon: ";
        cin >> choice;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        if (choice == 1) {
            registerUser();
        } else if (choice == 2) {
            currentUser = loginUser();
            if (currentUser) {
                int userChoice;
                while (true) {
                    printTitle("MENU NGUOI DUNG");
                    cout << "| 1. Xem so du vi                        |\n";
                    cout << "| 2. Chuyen diem                         |\n";
                    cout << "| 3. Xem thong tin tai khoan             |\n";
                    cout << "| 4. Cap nhat thong tin ca nhan          |\n";
                    cout << "| 5. Doi mat khau                        |\n";
                    if (currentUser->role == Role::ADMIN) {
                        cout << "| 6. Quan ly nguoi dung                  |\n";
                    }
                    cout << "| " << (currentUser->role == Role::ADMIN ? "7" : "6") << ". Dang xuat                          |\n";
                    printLine();
                    cout << "Lua chon: ";
                    cin >> userChoice;
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');

                    if (userChoice == 1) {
                        viewBalance(currentUser);
                    } else if (userChoice == 2) {
                        transferPoints(currentUser);
                    } else if (userChoice == 3) {
                        viewUserInfo(currentUser);
                    } else if (userChoice == 4) {
                        updateUserInfo(currentUser);
                    } else if (userChoice == 5) {
                        changePassword(currentUser);
                    } else if (userChoice == 6 && currentUser->role == Role::ADMIN) {
                        adminManageUsers(currentUser);
                    } else if (userChoice == (currentUser->role == Role::ADMIN ? 7 : 6)) {
                        cout << "Dang xuat thanh cong.\n";
                        currentUser = nullptr;
                        break;
                    } else {
                        cout << "Lua chon khong hop le.\n";
                    }
                }
            }
        } else if (choice == 3) {
            restoreBackup();
        } else if (choice == 4) {
            cout << "Thoat chuong trinh.\n";
            break;
        } else {
            cout << "Lua chon khong hop le.\n";
        }
    }

    saveUsers();
    saveWallets();
    return 0;
}